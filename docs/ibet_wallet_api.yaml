openapi: 3.1.0
info:
  title: ibet Wallet API
  description: >-
    RPC services that provides utility tools for building a wallet system on
    ibet network
  version: 23.9.0
paths:
  /:
    get:
      tags:
        - root
      summary: Root
      operationId: root__get
      responses:
        '200':
          description: Successful Response
  /Admin/Tokens:
    get:
      tags:
        - admin
      summary: List All Listed Tokens
      description: |-
        Endpoint: /Admin/Tokens
          - GET: 取扱トークン一覧取得
      operationId: TokensGET
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
    post:
      tags:
        - admin
      summary: List a Token
      description: |-
        Endpoint: /Admin/Tokens
          - POST: 取扱トークン登録
      operationId: TokensPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdminTokenRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Tokenspost
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataConflictErrorResponse'
  /Admin/Tokens/Type:
    get:
      tags:
        - admin
      summary: Available status by token type
      description: |-
        Endpoint: /Admin/Tokens/Type
          - GET: 取扱トークン種別
      operationId: TokenType
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
  /Admin/Tokens/{token_address}:
    get:
      tags:
        - admin
      summary: Retrieve a Listed Token
      description: |-
        Endpoint: /Admin/Tokens/{token_address}
          - GET: 取扱トークン情報取得（個別）
      operationId: TokenGET
      parameters:
        - description: Token Address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token Address
          name: token_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
    post:
      tags:
        - admin
      summary: Update a Listed Token
      description: |-
        Endpoint: /Admin/Tokens/{contract_address}
          - POST: 取扱トークン情報更新（個別）
      operationId: TokenPOST
      parameters:
        - description: Token Address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token Address
          name: token_address
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdminTokenRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Tokenpost
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
    delete:
      tags:
        - admin
      summary: Delete a Listed Token
      description: |-
        Endpoint: /Admin/Tokens/{contract_address}
          - DELETE: 取扱トークン情報削除（個別）
      operationId: TokenDELETE
      parameters:
        - description: Token Address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token Address
          name: token_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppErrorResponse'
  /NodeInfo:
    get:
      tags:
        - node_info
      summary: Blockchain node information
      description: 'Endpoint: /NodeInfo'
      operationId: NodeInfo
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
  /NodeInfo/BlockSyncStatus:
    get:
      tags:
        - node_info
      summary: Block synchronization status of the connected blockchain node
      description: 'Endpoint: /NodeInfo/BlockSyncStatus'
      operationId: NodeInfoBlockSyncStatus
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'
  /NodeInfo/BlockData:
    get:
      tags:
        - node_info
      summary: '[ibet Blockchain Explorer] List block data'
      description: |-
        Returns a list of block data within the specified block number range.
        The maximum number of search results is 1000.
      operationId: ListBlockData
      parameters:
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - required: false
          schema:
            type: integer
            minimum: 0
            title: From Block Number
          name: from_block_number
          in: query
        - required: false
          schema:
            type: integer
            minimum: 0
            title: To Block Number
          name: to_block_number
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ResponseLimitExceededErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Listblockdata
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /NodeInfo/BlockData/{block_number}:
    get:
      tags:
        - node_info
      summary: '[ibet Blockchain Explorer] Retrieve block data'
      description: Returns block data in the specified block number.
      operationId: GetBlockData
      parameters:
        - description: Block number
          required: true
          schema:
            type: integer
            minimum: 0
            title: Block Number
            description: Block number
          name: block_number
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                title: Response 404 Getblockdata
  /NodeInfo/TxData:
    get:
      tags:
        - node_info
      summary: '[ibet Blockchain Explorer] List tx data'
      description: |-
        Returns a list of transactions by various search parameters.
        The maximum number of search results is 10000.
      operationId: ListTxData
      parameters:
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: block number
          required: false
          schema:
            type: integer
            minimum: 0
            title: Block Number
            description: block number
          name: block_number
          in: query
        - description: tx from
          required: false
          schema:
            type: string
            title: From Address
            description: tx from
          name: from_address
          in: query
        - description: tx to
          required: false
          schema:
            type: string
            title: To Address
            description: tx to
          name: to_address
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ResponseLimitExceededErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Listtxdata
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /NodeInfo/TxData/{hash}:
    get:
      tags:
        - node_info
      summary: '[ibet Blockchain Explorer] Retrieve transaction data'
      description: Searching for the transaction by transaction hash
      operationId: GetTxData
      parameters:
        - description: Transaction hash
          required: true
          schema:
            type: string
            title: Hash
            description: Transaction hash
          name: hash
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                title: Response 404 Gettxdata
  /ABI/StraightBond:
    get:
      tags:
        - abi
      summary: StraightBond ABI
      description: 'Endpoint: /ABI/StraightBond'
      operationId: StraightBondABI
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /ABI/Share:
    get:
      tags:
        - abi
      summary: Share ABI
      description: 'Endpoint: /ABI/Share'
      operationId: ShareABI
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /ABI/Membership:
    get:
      tags:
        - abi
      summary: Membership ABI
      description: 'Endpoint: /ABI/Membership'
      operationId: MembershipABI
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /ABI/Coupon:
    get:
      tags:
        - abi
      summary: Coupon ABI
      description: 'Endpoint: /ABI/Coupon'
      operationId: CouponABI
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Companies:
    get:
      tags:
        - company_info
      summary: Issuer Information List
      description: 'Endpoint: /Companies'
      operationId: Companies
      parameters:
        - description: include private listing token issuers
          required: false
          schema:
            type: boolean
            title: Include Private Listing
            description: include private listing token issuers
            default: false
          name: include_private_listing
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /Companies/{eth_address}:
    get:
      tags:
        - company_info
      summary: Issuer Information
      description: 'Endpoint: /Companies/{eth_address}'
      operationId: Company
      parameters:
        - description: Issuer address
          required: true
          schema:
            type: string
            title: Eth Address
            description: Issuer address
          name: eth_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Company
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Companies/{eth_address}/Tokens:
    get:
      tags:
        - company_info
      summary: List of tokens issued by issuer
      description: 'Endpoint: /Companies/{eth_address}/Tokens'
      operationId: retrieve_company_tokens_Companies__eth_address__Tokens_get
      parameters:
        - description: Issuer address
          required: true
          schema:
            type: string
            title: Eth Address
            description: Issuer address
          name: eth_address
          in: path
        - description: include private listing token issuers
          required: false
          schema:
            type: boolean
            title: Include Private Listing
            description: include private listing token issuers
            default: false
          name: include_private_listing
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /User/PaymentAccount:
    get:
      tags:
        - user_info
      summary: Registration status to PaymentGateway Contract
      description: 'Endpoint: /User/PaymentAccount'
      operationId: PaymentAccount
      parameters:
        - description: Account Address
          required: true
          schema:
            type: string
            title: Account Address
            description: Account Address
          name: account_address
          in: query
        - description: Agent Address
          required: true
          schema:
            type: string
            title: Agent Address
            description: Agent Address
          name: agent_address
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /User/PersonalInfo:
    get:
      tags:
        - user_info
      summary: Registration status to PersonalInfo Contract
      description: 'Endpoint: /User/PersonalInfo'
      operationId: PersonalInfo
      parameters:
        - description: PersonalInfo contract address
          required: false
          schema:
            type: string
            title: Personal Info Address
            description: PersonalInfo contract address
          name: personal_info_address
          in: query
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: query
        - description: owner(issuer) address
          required: true
          schema:
            type: string
            title: Owner Address
            description: owner(issuer) address
          name: owner_address
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /Eth/RPC:
    post:
      tags:
        - eth_rpc
      summary: Raw JSON-RPC endpoint
      description: 'Endpoint: /Eth/RPC'
      operationId: EthereumJsonRpc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonRPCRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Ethereumjsonrpc
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'
  /Eth/TransactionCount/{eth_address}:
    get:
      tags:
        - eth_rpc
      summary: Transaction count for the specified eth_address
      description: 'Endpoint: /Eth/TransactionCount/{eth_address}'
      operationId: TransactionCount
      parameters:
        - required: true
          schema:
            type: string
            title: Eth Address
          name: eth_address
          in: path
        - required: false
          schema:
            $ref: '#/components/schemas/BlockIdentifier'
          name: block_identifier
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Transactioncount
  /Eth/SendRawTransaction:
    post:
      tags:
        - eth_rpc
      summary: Send signed transaction
      description: 'Endpoint: /Eth/SendRawTransaction'
      operationId: SendRawTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendRawTransactionRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuspendedTokenErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Sendrawtransaction
  /Eth/SendRawTransactionNoWait:
    post:
      tags:
        - eth_rpc
      summary: Send signed transaction
      description: 'Endpoint: /Eth/SendRawTransactionNoWait'
      operationId: SendRawTransactionNoWait
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendRawTransactionRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuspendedTokenErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Sendrawtransactionnowait
  /Eth/WaitForTransactionReceipt:
    get:
      tags:
        - eth_rpc
      summary: Wait for Transaction Receipt
      description: 'Endpoint: /Eth/WaitForTransactionReceipt'
      operationId: WaitForTransactionReceipt
      parameters:
        - description: transaction hash
          required: true
          schema:
            type: string
            title: Transaction Hash
            description: transaction hash
          name: transaction_hash
          in: query
        - description: Timeout value
          required: false
          schema:
            type: integer
            maximum: 30
            minimum: 1
            title: Timeout
            description: Timeout value
            default: 5
          name: timeout
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Token/StraightBond:
    get:
      tags:
        - token_info
      summary: Token detail list of StraightBond tokens
      description: Get a list of bond tokens.
      operationId: StraightBondTokens
      parameters:
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: list of token address (**this affects total number**)
            default: []
          name: address_list
          in: query
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: issuer address
          required: false
          schema:
            type: string
            title: Owner Address
            description: issuer address
          name: owner_address
          in: query
        - description: token name
          required: false
          schema:
            type: string
            title: Name
            description: token name
          name: name
          in: query
        - description: token symbol
          required: false
          schema:
            type: string
            title: Symbol
            description: token symbol
          name: symbol
          in: query
        - description: company name
          required: false
          schema:
            type: string
            title: Company Name
            description: company name
          name: company_name
          in: query
        - description: tradable exchange address
          required: false
          schema:
            type: string
            title: Tradable Exchange
            description: tradable exchange address
          name: tradable_exchange
          in: query
        - description: token status
          required: false
          schema:
            type: boolean
            title: Status
            description: token status
          name: status
          in: query
        - description: personal information address
          required: false
          schema:
            type: string
            title: Personal Info Address
            description: personal information address
          name: personal_info_address
          in: query
        - description: transferable status
          required: false
          schema:
            type: boolean
            title: Transferable
            description: transferable status
          name: transferable
          in: query
        - description: offering status
          required: false
          schema:
            type: boolean
            title: Is Offering
            description: offering status
          name: is_offering
          in: query
        - description: transfer approval required status
          required: false
          schema:
            type: boolean
            title: Transfer Approval Required
            description: transfer approval required status
          name: transfer_approval_required
          in: query
        - description: redeem status
          required: false
          schema:
            type: boolean
            title: Is Redeemed
            description: redeem status
          name: is_redeemed
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/StraightBondTokensSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Straightbondtokens
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/StraightBond/Addresses:
    get:
      tags:
        - token_info
      summary: List of StraightBond token address
      description: Get a list of bond token addresses.
      operationId: StraightBondTokenAddresses
      parameters:
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: issuer address
          required: false
          schema:
            type: string
            title: Owner Address
            description: issuer address
          name: owner_address
          in: query
        - description: token name
          required: false
          schema:
            type: string
            title: Name
            description: token name
          name: name
          in: query
        - description: token symbol
          required: false
          schema:
            type: string
            title: Symbol
            description: token symbol
          name: symbol
          in: query
        - description: company name
          required: false
          schema:
            type: string
            title: Company Name
            description: company name
          name: company_name
          in: query
        - description: tradable exchange address
          required: false
          schema:
            type: string
            title: Tradable Exchange
            description: tradable exchange address
          name: tradable_exchange
          in: query
        - description: token status
          required: false
          schema:
            type: boolean
            title: Status
            description: token status
          name: status
          in: query
        - description: personal information address
          required: false
          schema:
            type: string
            title: Personal Info Address
            description: personal information address
          name: personal_info_address
          in: query
        - description: transferable status
          required: false
          schema:
            type: boolean
            title: Transferable
            description: transferable status
          name: transferable
          in: query
        - description: offering status
          required: false
          schema:
            type: boolean
            title: Is Offering
            description: offering status
          name: is_offering
          in: query
        - description: transfer approval required status
          required: false
          schema:
            type: boolean
            title: Transfer Approval Required
            description: transfer approval required status
          name: transfer_approval_required
          in: query
        - description: redeem status
          required: false
          schema:
            type: boolean
            title: Is Redeemed
            description: redeem status
          name: is_redeemed
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/StraightBondTokensSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: list of token address (**this affects total number**)
            default: []
          name: address_list
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/StraightBond/{token_address}:
    get:
      tags:
        - token_info
      summary: StraightBond token details
      description: Get the details of the bond token.
      operationId: StraightBondTokenDetails
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Straightbondtokendetails
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                title: Response 404 Straightbondtokendetails
  /Token/Share:
    get:
      tags:
        - token_info
      summary: Token detail list of Share tokens
      description: Get a list of share tokens.
      operationId: ShareTokens
      parameters:
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: list of token address (**this affects total number**)
            default: []
          name: address_list
          in: query
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: issuer address
          required: false
          schema:
            type: string
            title: Owner Address
            description: issuer address
          name: owner_address
          in: query
        - description: token name
          required: false
          schema:
            type: string
            title: Name
            description: token name
          name: name
          in: query
        - description: token symbol
          required: false
          schema:
            type: string
            title: Symbol
            description: token symbol
          name: symbol
          in: query
        - description: company name
          required: false
          schema:
            type: string
            title: Company Name
            description: company name
          name: company_name
          in: query
        - description: tradable exchange address
          required: false
          schema:
            type: string
            title: Tradable Exchange
            description: tradable exchange address
          name: tradable_exchange
          in: query
        - description: token status
          required: false
          schema:
            type: boolean
            title: Status
            description: token status
          name: status
          in: query
        - description: personal information address
          required: false
          schema:
            type: string
            title: Personal Info Address
            description: personal information address
          name: personal_info_address
          in: query
        - description: transferable status
          required: false
          schema:
            type: boolean
            title: Transferable
            description: transferable status
          name: transferable
          in: query
        - description: offering status
          required: false
          schema:
            type: boolean
            title: Is Offering
            description: offering status
          name: is_offering
          in: query
        - description: transfer approval required status
          required: false
          schema:
            type: boolean
            title: Transfer Approval Required
            description: transfer approval required status
          name: transfer_approval_required
          in: query
        - description: cancellation status
          required: false
          schema:
            type: boolean
            title: Is Canceled
            description: cancellation status
          name: is_canceled
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/ShareTokensSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Sharetokens
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/Share/Addresses:
    get:
      tags:
        - token_info
      summary: List of Share token address
      description: Get a list of share token addresses.
      operationId: ShareTokenAddresses
      parameters:
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: issuer address
          required: false
          schema:
            type: string
            title: Owner Address
            description: issuer address
          name: owner_address
          in: query
        - description: token name
          required: false
          schema:
            type: string
            title: Name
            description: token name
          name: name
          in: query
        - description: token symbol
          required: false
          schema:
            type: string
            title: Symbol
            description: token symbol
          name: symbol
          in: query
        - description: company name
          required: false
          schema:
            type: string
            title: Company Name
            description: company name
          name: company_name
          in: query
        - description: tradable exchange address
          required: false
          schema:
            type: string
            title: Tradable Exchange
            description: tradable exchange address
          name: tradable_exchange
          in: query
        - description: token status
          required: false
          schema:
            type: boolean
            title: Status
            description: token status
          name: status
          in: query
        - description: personal information address
          required: false
          schema:
            type: string
            title: Personal Info Address
            description: personal information address
          name: personal_info_address
          in: query
        - description: transferable status
          required: false
          schema:
            type: boolean
            title: Transferable
            description: transferable status
          name: transferable
          in: query
        - description: offering status
          required: false
          schema:
            type: boolean
            title: Is Offering
            description: offering status
          name: is_offering
          in: query
        - description: transfer approval required status
          required: false
          schema:
            type: boolean
            title: Transfer Approval Required
            description: transfer approval required status
          name: transfer_approval_required
          in: query
        - description: cancellation status
          required: false
          schema:
            type: boolean
            title: Is Canceled
            description: cancellation status
          name: is_canceled
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/ShareTokensSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/Share/{token_address}:
    get:
      tags:
        - token_info
      summary: Share token details
      description: Get the details of the bond token.
      operationId: ShareTokenDetails
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Sharetokendetails
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/Membership:
    get:
      tags:
        - token_info
      summary: Token detail list of Membership tokens
      description: Get a list of membership tokens.
      operationId: MembershipTokens
      parameters:
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: list of token address (**this affects total number**)
            default: []
          name: address_list
          in: query
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: issuer address
          required: false
          schema:
            type: string
            title: Owner Address
            description: issuer address
          name: owner_address
          in: query
        - description: token name
          required: false
          schema:
            type: string
            title: Name
            description: token name
          name: name
          in: query
        - description: token symbol
          required: false
          schema:
            type: string
            title: Symbol
            description: token symbol
          name: symbol
          in: query
        - description: company name
          required: false
          schema:
            type: string
            title: Company Name
            description: company name
          name: company_name
          in: query
        - description: tradable exchange address
          required: false
          schema:
            type: string
            title: Tradable Exchange
            description: tradable exchange address
          name: tradable_exchange
          in: query
        - description: token status
          required: false
          schema:
            type: boolean
            title: Status
            description: token status
          name: status
          in: query
        - description: transferable status
          required: false
          schema:
            type: boolean
            title: Transferable
            description: transferable status
          name: transferable
          in: query
        - description: offering status
          required: false
          schema:
            type: boolean
            title: Initial Offering Status
            description: offering status
          name: initial_offering_status
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/MembershipTokensSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Membershiptokens
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/Membership/Addresses:
    get:
      tags:
        - token_info
      summary: List of Membership token address
      description: Get a list of membership token addresses.
      operationId: MembershipTokenAddresses
      parameters:
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: issuer address
          required: false
          schema:
            type: string
            title: Owner Address
            description: issuer address
          name: owner_address
          in: query
        - description: token name
          required: false
          schema:
            type: string
            title: Name
            description: token name
          name: name
          in: query
        - description: token symbol
          required: false
          schema:
            type: string
            title: Symbol
            description: token symbol
          name: symbol
          in: query
        - description: company name
          required: false
          schema:
            type: string
            title: Company Name
            description: company name
          name: company_name
          in: query
        - description: tradable exchange address
          required: false
          schema:
            type: string
            title: Tradable Exchange
            description: tradable exchange address
          name: tradable_exchange
          in: query
        - description: token status
          required: false
          schema:
            type: boolean
            title: Status
            description: token status
          name: status
          in: query
        - description: transferable status
          required: false
          schema:
            type: boolean
            title: Transferable
            description: transferable status
          name: transferable
          in: query
        - description: offering status
          required: false
          schema:
            type: boolean
            title: Initial Offering Status
            description: offering status
          name: initial_offering_status
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/MembershipTokensSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/Membership/{token_address}:
    get:
      tags:
        - token_info
      summary: Membership token details
      description: Get the details of the membership token.
      operationId: MembershipTokenDetails
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                title: Response 404 Membershiptokendetails
  /Token/Coupon:
    get:
      tags:
        - token_info
      summary: Token detail list of Coupon tokens
      description: Get a list of coupon tokens.
      operationId: CouponTokens
      parameters:
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: list of token address (**this affects total number**)
            default: []
          name: address_list
          in: query
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: issuer address
          required: false
          schema:
            type: string
            title: Owner Address
            description: issuer address
          name: owner_address
          in: query
        - description: token name
          required: false
          schema:
            type: string
            title: Name
            description: token name
          name: name
          in: query
        - description: token symbol
          required: false
          schema:
            type: string
            title: Symbol
            description: token symbol
          name: symbol
          in: query
        - description: company name
          required: false
          schema:
            type: string
            title: Company Name
            description: company name
          name: company_name
          in: query
        - description: tradable exchange address
          required: false
          schema:
            type: string
            title: Tradable Exchange
            description: tradable exchange address
          name: tradable_exchange
          in: query
        - description: token status
          required: false
          schema:
            type: boolean
            title: Status
            description: token status
          name: status
          in: query
        - description: transferable status
          required: false
          schema:
            type: boolean
            title: Transferable
            description: transferable status
          name: transferable
          in: query
        - description: offering status
          required: false
          schema:
            type: boolean
            title: Initial Offering Status
            description: offering status
          name: initial_offering_status
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/CouponTokensSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Coupontokens
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/Coupon/Addresses:
    get:
      tags:
        - token_info
      summary: List of Coupon token address
      description: Get a list of coupon token addresses.
      operationId: CouponTokenAddresses
      parameters:
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: issuer address
          required: false
          schema:
            type: string
            title: Owner Address
            description: issuer address
          name: owner_address
          in: query
        - description: token name
          required: false
          schema:
            type: string
            title: Name
            description: token name
          name: name
          in: query
        - description: token symbol
          required: false
          schema:
            type: string
            title: Symbol
            description: token symbol
          name: symbol
          in: query
        - description: company name
          required: false
          schema:
            type: string
            title: Company Name
            description: company name
          name: company_name
          in: query
        - description: tradable exchange address
          required: false
          schema:
            type: string
            title: Tradable Exchange
            description: tradable exchange address
          name: tradable_exchange
          in: query
        - description: token status
          required: false
          schema:
            type: boolean
            title: Status
            description: token status
          name: status
          in: query
        - description: transferable status
          required: false
          schema:
            type: boolean
            title: Transferable
            description: transferable status
          name: transferable
          in: query
        - description: offering status
          required: false
          schema:
            type: boolean
            title: Initial Offering Status
            description: offering status
          name: initial_offering_status
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/CouponTokensSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Token/Coupon/{token_address}:
    get:
      tags:
        - token_info
      summary: Coupon token details
      description: Get the details of the membership token.
      operationId: CouponTokenDetails
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Coupontokendetails
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                title: Response 404 Coupontokendetails
  /Token/{token_address}/Status:
    get:
      tags:
        - token_info
      summary: Token Status
      description: 'Endpoint: /Token/{contract_address}/Status'
      operationId: TokenStatus
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Tokenstatus
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Token/{token_address}/Holders:
    get:
      tags:
        - token_info
      summary: Token holders
      description: 'Endpoint: /Token/{contract_address}/Holders'
      operationId: TokenHolders
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
        - description: exclude owner
          required: false
          schema:
            type: boolean
            title: Exclude Owner
            description: exclude owner
            default: false
          name: exclude_owner
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Tokenholders
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Token/{token_address}/Holders/Count:
    get:
      tags:
        - token_info
      summary: Token holders count
      description: 'Endpoint: /Token/{token_address}/Holders/Count'
      operationId: TokenHoldersCount
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
        - description: exclude owner
          required: false
          schema:
            type: boolean
            title: Exclude Owner
            description: exclude owner
            default: false
          name: exclude_owner
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Tokenholderscount
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Token/{token_address}/Holders/Collection:
    post:
      tags:
        - token_info
      summary: Execute Batch Getting Token Holders At Specific BlockNumber
      description: 'Endpoint: /Token/{token_address}/Holders/Collection'
      operationId: TokenHoldersCollection
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenHoldersCollectionRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Tokenholderscollection
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Token/{token_address}/Holders/Collection/{list_id}:
    get:
      tags:
        - token_info
      summary: Token Holder At Specific BlockNumber
      description: 'Endpoint: /Token/{token_address}/Holders/Collection/{list_id}'
      operationId: TokenHoldersList
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
        - description: >-
            Unique id to be assigned to each token holder list.This must be
            Version4 UUID.
          required: true
          schema:
            type: string
            format: uuid4
            title: List Id
            description: >-
              Unique id to be assigned to each token holder list.This must be
              Version4 UUID.
            examples:
              - cfd83622-34dc-4efe-a68b-2cc275d3d824
          name: list_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Tokenholderslist
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Token/{token_address}/TransferHistory:
    get:
      tags:
        - token_info
      summary: Token Transfer History
      description: 'Endpoint: /Token/{token_address}/TransferHistory'
      operationId: TransferHistory
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: source event of transfer
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/TransferSourceEvent'
            description: source event of transfer
          name: source_event
          in: query
        - description: source event data
          required: false
          schema:
            type: string
            title: Data
            description: source event data
          name: data
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Transferhistory
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Token/{token_address}/TransferApprovalHistory:
    get:
      tags:
        - token_info
      summary: Token Transfer Approval History
      description: 'Endpoint: /Token/{token_address}/TransferApprovalHistory'
      operationId: TransferApprovalHistory
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Transferapprovalhistory
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Token/Lock:
    get:
      tags:
        - token_info
      summary: Token Lock
      operationId: ListAllTokenLock
      parameters:
        - description: lock address
          required: false
          schema:
            type: string
            title: Lock Address
            description: lock address
          name: lock_address
          in: query
        - description: account address
          required: false
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: query
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/ListAllLockSortItem'
            description: sort item
            default: token_address
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Token Address List
            description: list of token address (**this affects total number**)
            default: []
          name: token_address_list
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Listalltokenlock
  /Token/Lock/Count:
    get:
      tags:
        - token_info
      summary: Token Lock Count
      operationId: RetrieveTokenLockCount
      parameters:
        - description: lock address
          required: false
          schema:
            type: string
            title: Lock Address
            description: lock address
          name: lock_address
          in: query
        - description: account address
          required: false
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: query
        - description: list of token address
          required: false
          schema:
            items:
              type: string
            type: array
            title: Token Address List
            description: list of token address
            default: []
          name: token_address_list
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Retrievetokenlockcount
  /Position/{account_address}/Share/Lock:
    get:
      tags:
        - user_position
      summary: Share Token Locked Position
      description: List all share locked position
      operationId: GetShareTokenLockedPosition
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: lock address
          required: false
          schema:
            type: string
            title: Lock Address
            description: lock address
          name: lock_address
          in: query
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/ListAllLockedSortItem'
            description: sort item
            default: token_address
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Token Address List
            description: list of token address (**this affects total number**)
            default: []
          name: token_address_list
          in: query
        - description: include token details
          required: false
          schema:
            type: boolean
            title: Include Token Details
            description: include token details
            default: false
          name: include_token_details
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getsharetokenlockedposition
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Position/{account_address}/Share/Lock/Event:
    get:
      tags:
        - user_position
      summary: Share Token Lock Events
      description: List all share lock events
      operationId: GetShareTokenLockEvent
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Token Address List
            description: list of token address (**this affects total number**)
            default: []
          name: token_address_list
          in: query
        - description: message sender
          required: false
          schema:
            type: string
            title: Msg Sender
            description: message sender
          name: msg_sender
          in: query
        - description: lock address
          required: false
          schema:
            type: string
            title: Lock Address
            description: lock address
          name: lock_address
          in: query
        - description: recipient address
          required: false
          schema:
            type: string
            title: Recipient Address
            description: recipient address
          name: recipient_address
          in: query
        - description: data
          required: false
          schema:
            type: string
            title: Data
            description: data
          name: data
          in: query
        - description: history item category
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/LockEventCategory'
            description: history item category
          name: category
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/LockEventSortItem'
            description: sort item
            default: block_timestamp
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 1
          name: sort_order
          in: query
        - description: include token details
          required: false
          schema:
            type: boolean
            title: Include Token Details
            description: include token details
            default: false
          name: include_token_details
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /Position/{account_address}/StraightBond/Lock:
    get:
      tags:
        - user_position
      summary: StraightBond Token Locked Position
      description: List all bond locked position
      operationId: GetStraightBondTokenLockedPosition
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: lock address
          required: false
          schema:
            type: string
            title: Lock Address
            description: lock address
          name: lock_address
          in: query
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/ListAllLockedSortItem'
            description: sort item
            default: token_address
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Token Address List
            description: list of token address (**this affects total number**)
            default: []
          name: token_address_list
          in: query
        - description: include token details
          required: false
          schema:
            type: boolean
            title: Include Token Details
            description: include token details
            default: false
          name: include_token_details
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getstraightbondtokenlockedposition
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Position/{account_address}/StraightBond/Lock/Event:
    get:
      tags:
        - user_position
      summary: StraightBond Token Lock Events
      description: List all bond lock events
      operationId: GetStraightBondTokenLockEvent
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: list of token address (**this affects total number**)
          required: false
          schema:
            items:
              type: string
            type: array
            title: Token Address List
            description: list of token address (**this affects total number**)
            default: []
          name: token_address_list
          in: query
        - description: message sender
          required: false
          schema:
            type: string
            title: Msg Sender
            description: message sender
          name: msg_sender
          in: query
        - description: lock address
          required: false
          schema:
            type: string
            title: Lock Address
            description: lock address
          name: lock_address
          in: query
        - description: recipient address
          required: false
          schema:
            type: string
            title: Recipient Address
            description: recipient address
          name: recipient_address
          in: query
        - description: data
          required: false
          schema:
            type: string
            title: Data
            description: data
          name: data
          in: query
        - description: history item category
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/LockEventCategory'
            description: history item category
          name: category
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/LockEventSortItem'
            description: sort item
            default: block_timestamp
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 1
          name: sort_order
          in: query
        - description: include token details
          required: false
          schema:
            type: boolean
            title: Include Token Details
            description: include token details
            default: false
          name: include_token_details
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /Position/{account_address}/Share:
    get:
      tags:
        - user_position
      summary: Share Token Position
      description: List all share position
      operationId: GetShareTokenPosition
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: include token details
          required: false
          schema:
            type: boolean
            title: Include Token Details
            description: include token details
            default: false
          name: include_token_details
          in: query
        - description: enable using indexed position data
          required: false
          schema:
            type: boolean
            title: Enable Index
            description: enable using indexed position data
            default: false
          name: enable_index
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getsharetokenposition
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                title: Response 404 Getsharetokenposition
  /Position/{account_address}/StraightBond:
    get:
      tags:
        - user_position
      summary: StraightBond Token Position
      description: List all bond position
      operationId: GetStraightBondTokenPosition
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: include token details
          required: false
          schema:
            type: boolean
            title: Include Token Details
            description: include token details
            default: false
          name: include_token_details
          in: query
        - description: enable using indexed position data
          required: false
          schema:
            type: boolean
            title: Enable Index
            description: enable using indexed position data
            default: false
          name: enable_index
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getstraightbondtokenposition
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                title: Response 404 Getstraightbondtokenposition
  /Position/{account_address}/Membership:
    get:
      tags:
        - user_position
      summary: Membership Token Position
      description: List all membership position
      operationId: GetMembershipTokenPosition
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: include token details
          required: false
          schema:
            type: boolean
            title: Include Token Details
            description: include token details
            default: false
          name: include_token_details
          in: query
        - description: enable using indexed position data
          required: false
          schema:
            type: boolean
            title: Enable Index
            description: enable using indexed position data
            default: false
          name: enable_index
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getmembershiptokenposition
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                title: Response 404 Getmembershiptokenposition
  /Position/{account_address}/Coupon:
    get:
      tags:
        - user_position
      summary: Coupon Token Position
      description: List all coupon position
      operationId: GetCouponTokenPosition
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: include token details
          required: false
          schema:
            type: boolean
            title: Include Token Details
            description: include token details
            default: false
          name: include_token_details
          in: query
        - description: enable using indexed position data
          required: false
          schema:
            type: boolean
            title: Enable Index
            description: enable using indexed position data
            default: false
          name: enable_index
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getcoupontokenposition
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                title: Response 404 Getcoupontokenposition
  /Position/{account_address}/Share/{token_address}:
    get:
      tags:
        - user_position
      summary: Share Token Position By Token Address
      description: Retrieve share position detail
      operationId: GetShareTokenPositionByAddress
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: token address
          required: true
          schema:
            type: string
            title: Token Address
            description: token address
          name: token_address
          in: path
        - description: enable using indexed position data
          required: false
          schema:
            type: boolean
            title: Enable Index
            description: enable using indexed position data
            default: false
          name: enable_index
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getsharetokenpositionbyaddress
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                title: Response 404 Getsharetokenpositionbyaddress
  /Position/{account_address}/StraightBond/{token_address}:
    get:
      tags:
        - user_position
      summary: StraightBond Token Position By Token Address
      description: Retrieve bond position detail
      operationId: GetStraightBondTokenPositionByAddress
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: token address
          required: true
          schema:
            type: string
            title: Token Address
            description: token address
          name: token_address
          in: path
        - description: enable using indexed position data
          required: false
          schema:
            type: boolean
            title: Enable Index
            description: enable using indexed position data
            default: false
          name: enable_index
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getstraightbondtokenpositionbyaddress
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                title: Response 404 Getstraightbondtokenpositionbyaddress
  /Position/{account_address}/Membership/{token_address}:
    get:
      tags:
        - user_position
      summary: Membership Token Position By Token Address
      description: Retrieve membership position detail
      operationId: GetMembershipTokenPositionByAddress
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: token address
          required: true
          schema:
            type: string
            title: Token Address
            description: token address
          name: token_address
          in: path
        - description: enable using indexed position data
          required: false
          schema:
            type: boolean
            title: Enable Index
            description: enable using indexed position data
            default: false
          name: enable_index
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getmembershiptokenpositionbyaddress
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                title: Response 404 Getmembershiptokenpositionbyaddress
  /Position/{account_address}/Coupon/{token_address}:
    get:
      tags:
        - user_position
      summary: Coupon Token Position By Token Address
      description: Retrieve coupon position detail
      operationId: GetCouponTokenPositionByAddress
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: token address
          required: true
          schema:
            type: string
            title: Token Address
            description: token address
          name: token_address
          in: path
        - description: enable using indexed position data
          required: false
          schema:
            type: boolean
            title: Enable Index
            description: enable using indexed position data
            default: false
          name: enable_index
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getcoupontokenpositionbyaddress
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DataNotExistsErrorResponse'
                  - $ref: '#/components/schemas/NotSupportedErrorResponse'
                title: Response 404 Getcoupontokenpositionbyaddress
  /Position/{account_address}/Coupon/{token_address}/Consumptions:
    get:
      tags:
        - user_position
      summary: List All Coupon Consumptions
      description: List all coupon consumptions
      operationId: ListAllCouponConsumptions
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: token_address
          required: true
          schema:
            type: string
            title: Token Address
            description: token_address
          name: token_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /Position/{account_address}:
    get:
      tags:
        - user_position
      summary: Token Position
      description: List all positions
      operationId: GetTokenPosition
      parameters:
        - description: account address
          required: true
          schema:
            type: string
            title: Account Address
            description: account address
          name: account_address
          in: path
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - description: type of token
          required: false
          schema:
            items:
              $ref: '#/components/schemas/TokenType'
            type: array
            description: type of token
          name: token_type_list
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Gettokenposition
  /Notifications:
    get:
      tags:
        - user_notification
      summary: Notification List
      description: 'Endpoint: /Notifications/'
      operationId: GetNotifications
      parameters:
        - description: start position
          required: false
          schema:
            type: integer
            minimum: 0
            title: Offset
            description: start position
          name: offset
          in: query
        - description: number of set
          required: false
          schema:
            type: integer
            minimum: 0
            title: Limit
            description: number of set
          name: limit
          in: query
        - required: false
          schema:
            type: string
            title: Address
          name: address
          in: query
        - required: false
          schema:
            $ref: '#/components/schemas/NotificationType'
          name: notification_type
          in: query
        - required: false
          schema:
            type: integer
            maximum: 2
            minimum: 0
            title: Priority
          name: priority
          in: query
        - description: sort item
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/NotificationsSortItem'
            description: sort item
            default: created
          name: sort_item
          in: query
        - description: 'sort order(0: ASC, 1: DESC)'
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/SortOrder'
            description: 'sort order(0: ASC, 1: DESC)'
            default: 0
          name: sort_order
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /Notifications/Read:
    post:
      tags:
        - user_notification
      summary: Mark all notifications as read
      description: 'Endpoint: /Notifications/Read/'
      operationId: NotificationsRead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationReadRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /Notifications/Count:
    get:
      tags:
        - user_notification
      summary: Get the number of unread notifications
      description: 'Endpoint: /Notifications/Count/'
      operationId: NotificationsCount
      parameters:
        - required: false
          schema:
            type: string
            title: Address
          name: address
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
  /Notifications/{notification_id}:
    post:
      tags:
        - user_notification
      summary: Update Notification
      description: 'Endpoint: /Notifications/{id}'
      operationId: PostNotifications
      parameters:
        - description: Notification id
          required: true
          schema:
            type: string
            title: Notification Id
            description: Notification id
          name: notification_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNotificationRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
    delete:
      tags:
        - user_notification
      summary: Delete Notification
      operationId: DeleteNotification
      parameters:
        - description: Notification id
          required: true
          schema:
            type: string
            title: Notification Id
            description: Notification id
          name: notification_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /E2EMessage/EncryptionKey/{account_address}:
    get:
      tags:
        - messaging
      summary: Retrieve message encryption key
      description: 'Endpoint: /E2EMessage/EncryptionKey/{account_address}'
      operationId: EncryptionKey
      parameters:
        - description: Account address (message receiver)
          required: true
          schema:
            type: string
            title: Account Address
            description: Account address (message receiver)
          name: account_address
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Encryptionkey
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataNotExistsErrorResponse'
  /Mail:
    post:
      tags:
        - messaging
      summary: Send Email
      description: Send Email
      operationId: SendEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMailRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Sendemail
  /Chat/Webhook:
    post:
      tags:
        - messaging
      summary: Send chat messages using incoming webhooks
      description: Send Chat Webhook
      operationId: SendChatWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendChatWebhookRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Sendchatwebhook
  /Events/E2EMessaging:
    get:
      tags:
        - contract_log
      summary: List all E2EMessaging event logs
      description: List all E2EMessaging event logs
      operationId: E2EMessagingEvents
      parameters:
        - description: from block number
          required: true
          schema:
            type: integer
            minimum: 1
            title: From Block
            description: from block number
          name: from_block
          in: query
        - description: to block number
          required: true
          schema:
            type: integer
            minimum: 1
            title: To Block
            description: to block number
          name: to_block
          in: query
        - description: events to get
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/E2EMessagingEventType'
            description: events to get
          name: event
          in: query
        - description: >-
            filter argument. serialize obj to a JSON formatted str
            required.eg.```{"sender":
            "0x0000000000000000000000000000000000000000"}```
          required: false
          schema:
            type: string
            title: Argument Filters
            description: >-
              filter argument. serialize obj to a JSON formatted str
              required.eg.```{"sender":
              "0x0000000000000000000000000000000000000000"}```
          name: argument_filters
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: >-
                      #/components/schemas/RequestBlockRangeLimitExceededErrorResponse
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 E2Emessagingevents
  /Events/IbetEscrow:
    get:
      tags:
        - contract_log
      summary: List all IbetEscrow event logs
      description: List all IbetEscrow event logs
      operationId: IbetEscrowEvents
      parameters:
        - description: from block number
          required: true
          schema:
            type: integer
            minimum: 1
            title: From Block
            description: from block number
          name: from_block
          in: query
        - description: to block number
          required: true
          schema:
            type: integer
            minimum: 1
            title: To Block
            description: to block number
          name: to_block
          in: query
        - description: events to get
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/IbetEscrowEventType'
            description: events to get
          name: event
          in: query
        - description: >-
            filter argument. serialize obj to a JSON formatted str
            required.eg.```{"sender":
            "0x0000000000000000000000000000000000000000"}```
          required: false
          schema:
            type: string
            title: Argument Filters
            description: >-
              filter argument. serialize obj to a JSON formatted str
              required.eg.```{"sender":
              "0x0000000000000000000000000000000000000000"}```
          name: argument_filters
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: >-
                      #/components/schemas/RequestBlockRangeLimitExceededErrorResponse
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Ibetescrowevents
  /Events/IbetSecurityTokenEscrow:
    get:
      tags:
        - contract_log
      summary: List all IbetSecurityTokenEscrow event logs
      description: List all IbetSecurityTokenEscrow event logs
      operationId: IbetSecurityTokenEscrowEvents
      parameters:
        - description: from block number
          required: true
          schema:
            type: integer
            minimum: 1
            title: From Block
            description: from block number
          name: from_block
          in: query
        - description: to block number
          required: true
          schema:
            type: integer
            minimum: 1
            title: To Block
            description: to block number
          name: to_block
          in: query
        - description: events to get
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/IbetSecurityTokenEscrowEventType'
            description: events to get
          name: event
          in: query
        - description: >-
            filter argument. serialize obj to a JSON formatted str
            required.eg.```{"sender":
            "0x0000000000000000000000000000000000000000"}```
          required: false
          schema:
            type: string
            title: Argument Filters
            description: >-
              filter argument. serialize obj to a JSON formatted str
              required.eg.```{"sender":
              "0x0000000000000000000000000000000000000000"}```
          name: argument_filters
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: >-
                      #/components/schemas/RequestBlockRangeLimitExceededErrorResponse
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Ibetsecuritytokenescrowevents
  /Events/IbetSecurityTokenInterface/{token_address}:
    get:
      tags:
        - contract_log
      summary: List all IbetSecurityTokenInterface event logs
      description: List all IbetSecurityTokenInterface event logs
      operationId: IbetSecurityTokenInterfaceEvents
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
        - description: from block number
          required: true
          schema:
            type: integer
            minimum: 1
            title: From Block
            description: from block number
          name: from_block
          in: query
        - description: to block number
          required: true
          schema:
            type: integer
            minimum: 1
            title: To Block
            description: to block number
          name: to_block
          in: query
        - description: events to get
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/IbetSecurityTokenInterfaceEventType'
            description: events to get
          name: event
          in: query
        - description: >-
            filter argument. serialize obj to a JSON formatted str
            required.eg.```{"sender":
            "0x0000000000000000000000000000000000000000"}```
          required: false
          schema:
            type: string
            title: Argument Filters
            description: >-
              filter argument. serialize obj to a JSON formatted str
              required.eg.```{"sender":
              "0x0000000000000000000000000000000000000000"}```
          name: argument_filters
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: >-
                      #/components/schemas/RequestBlockRangeLimitExceededErrorResponse
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Ibetsecuritytokeninterfaceevents
  /DEX/Market/Agreement:
    get:
      tags:
        - dex
      summary: Agreement Details
      description: 約定情報参照
      operationId: GetAgreement
      parameters:
        - description: order id
          required: true
          schema:
            type: integer
            title: Order Id
            description: order id
          name: order_id
          in: query
        - description: agreement id
          required: true
          schema:
            type: integer
            title: Agreement Id
            description: agreement id
          name: agreement_id
          in: query
        - description: exchange_address
          required: true
          schema:
            type: string
            title: Exchange Address
            description: exchange_address
          name: exchange_address
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Getagreement
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/Market/OrderBook/Membership:
    get:
      tags:
        - dex
      summary: Membership Token Order Book
      description: '[会員権]板情報取得'
      operationId: MembershipOrderBook
      parameters:
        - description: >-
            Orderer's account address. Orders from the given address will not be
            included in the response.
          required: false
          schema:
            type: string
            title: Account Address
            description: >-
              Orderer's account address. Orders from the given address will not
              be included in the response.
          name: account_address
          in: query
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: query
        - description: Settlement agent address on ibet exchange
          required: true
          schema:
            type: string
            title: Exchange Agent Address
            description: Settlement agent address on ibet exchange
          name: exchange_agent_address
          in: query
        - description: >-
            Order type to be executed by the Orderer. If "buy" is selected, the
            sell order book will be returned.
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/OrderType'
            description: >-
              Order type to be executed by the Orderer. If "buy" is selected,
              the sell order book will be returned.
          name: order_type
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/Market/LastPrice/Membership:
    get:
      tags:
        - dex
      summary: Membership Token Last Price (Bulk Get)
      description: '[会員権]現在値取得'
      operationId: MembershipLastPrice
      parameters:
        - description: Token address list
          required: true
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: Token address list
          name: address_list
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/Market/Tick/Membership:
    get:
      tags:
        - dex
      summary: Membership Token Tick (Bulk Get)
      description: '[会員権]歩み値取得'
      operationId: MembershipTick
      parameters:
        - description: Token address list
          required: true
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: Token address list
          name: address_list
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/Market/OrderBook/Coupon:
    get:
      tags:
        - dex
      summary: Coupon Token Order Book
      description: '[クーポン]板情報取得'
      operationId: CouponOrderBook
      parameters:
        - description: >-
            Orderer's account address. Orders from the given address will not be
            included in the response.
          required: false
          schema:
            type: string
            title: Account Address
            description: >-
              Orderer's account address. Orders from the given address will not
              be included in the response.
          name: account_address
          in: query
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: query
        - description: Settlement agent address on ibet exchange
          required: true
          schema:
            type: string
            title: Exchange Agent Address
            description: Settlement agent address on ibet exchange
          name: exchange_agent_address
          in: query
        - description: >-
            Order type to be executed by the Orderer. If "buy" is selected, the
            sell order book will be returned.
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/OrderType'
            description: >-
              Order type to be executed by the Orderer. If "buy" is selected,
              the sell order book will be returned.
          name: order_type
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/Market/LastPrice/Coupon:
    get:
      tags:
        - dex
      summary: Coupon Token Last Price (Bulk Get)
      description: '[クーポン]現在値取得'
      operationId: CouponLastPrice
      parameters:
        - description: Token address list
          required: true
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: Token address list
          name: address_list
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/Market/Tick/Coupon:
    get:
      tags:
        - dex
      summary: Coupon Token Tick (Bulk Get)
      description: '[クーポン]歩み値取得'
      operationId: CouponTick
      parameters:
        - description: Token address list
          required: true
          schema:
            items:
              type: string
            type: array
            title: Address List
            description: Token address list
          name: address_list
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/OrderList/Membership:
    get:
      tags:
        - dex
      summary: Membership Order History (Bulk Get)
      description: 'Endpoint: /DEX/OrderList/Membership'
      operationId: MembershipOrderList
      parameters:
        - description: Account address list
          required: true
          schema:
            items:
              type: string
            type: array
            title: Account Address List
            description: Account address list
          name: account_address_list
          in: query
        - description: Whether to include canceled orders or canceled agreements.
          required: false
          schema:
            type: boolean
            title: Include Canceled Items
            description: Whether to include canceled orders or canceled agreements.
          name: include_canceled_items
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/OrderList/Coupon:
    get:
      tags:
        - dex
      summary: Coupon Order History (Bulk Get)
      description: 'Endpoint: /DEX/OrderList/Coupon'
      operationId: CouponOrderList
      parameters:
        - description: Account address list
          required: true
          schema:
            items:
              type: string
            type: array
            title: Account Address List
            description: Account address list
          name: account_address_list
          in: query
        - description: Whether to include canceled orders or canceled agreements.
          required: false
          schema:
            type: boolean
            title: Include Canceled Items
            description: Whether to include canceled orders or canceled agreements.
          name: include_canceled_items
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidationErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
  /DEX/OrderList/{token_address}:
    get:
      tags:
        - dex
      summary: Order History filtered by token (Bulk Get)
      description: 'Endpoint: /DEX/OrderList/{token_address}'
      operationId: IbetExchange
      parameters:
        - description: Token address
          required: true
          schema:
            type: string
            title: Token Address
            description: Token address
          name: token_address
          in: path
        - description: Account address list
          required: true
          schema:
            items:
              type: string
            type: array
            title: Account Address List
            description: Account address list
          name: account_address_list
          in: query
        - description: Whether to include canceled orders or canceled agreements.
          required: false
          schema:
            type: boolean
            title: Include Canceled Items
            description: Whether to include canceled orders or canceled agreements.
          name: include_canceled_items
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidParameterErrorResponse'
                  - $ref: '#/components/schemas/RequestValidationErrorResponse'
                title: Response 400 Ibetexchange
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedErrorResponse'
components:
  schemas:
    AppErrorMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 0
        message:
          type: string
          title: Message
          examples:
            - ''
      type: object
      required:
        - code
        - message
      title: AppErrorMetainfo
    AppErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/AppErrorMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: AppErrorResponse
    BlockIdentifier:
      type: string
      enum:
        - latest
        - earliest
        - pending
      title: BlockIdentifier
      description: An enumeration.
    CouponTokensSortItem:
      type: string
      enum:
        - token_address
        - owner_address
        - name
        - symbol
        - company_name
        - tradable_exchange
        - status
        - personal_info_address
        - transferable
        - initial_offering_status
        - created
      title: CouponTokensSortItem
      description: An enumeration.
    CreateTokenHoldersCollectionRequest:
      properties:
        list_id:
          type: string
          format: uuid4
          title: List Id
          description: >-
            Unique id to be assigned to each token holder list.This must be
            Version4 UUID.
          examples:
            - cfd83622-34dc-4efe-a68b-2cc275d3d824
        block_number:
          type: integer
          title: Block Number
          description: block number
      type: object
      required:
        - list_id
        - block_number
      title: CreateTokenHoldersCollectionRequest
    DataConflictErrorMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 40
        message:
          type: string
          title: Message
          examples:
            - Data Conflict
      type: object
      required:
        - code
        - message
      title: DataConflictErrorMetainfo
    DataConflictErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/DataConflictErrorMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: DataConflictErrorResponse
    DataNotExistsErrorMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 30
        message:
          type: string
          title: Message
          examples:
            - Data Not Exists
      type: object
      required:
        - code
        - message
      title: DataNotExistsErrorMetainfo
    DataNotExistsErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/DataNotExistsErrorMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: DataNotExistsErrorResponse
    E2EMessagingEventType:
      type: string
      enum:
        - PublicKeyUpdated
        - Message
      title: E2EMessagingEventType
      description: An enumeration.
    GenericSuccessResponse:
      properties:
        meta:
          allOf:
            - $ref: '#/components/schemas/Success200MetaModel'
          title: Meta
          examples:
            - code: 200
              message: OK
        data:
          title: Data
      type: object
      required:
        - meta
      title: GenericSuccessResponse
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    IbetEscrowEventType:
      type: string
      enum:
        - Deposited
        - Withdrawn
        - EscrowCreated
        - EscrowCanceled
        - EscrowFinished
      title: IbetEscrowEventType
      description: An enumeration.
    IbetSecurityTokenEscrowEventType:
      type: string
      enum:
        - Deposited
        - Withdrawn
        - EscrowCreated
        - EscrowCanceled
        - EscrowFinished
        - ApplyForTransfer
        - CancelTransfer
        - ApproveTransfer
        - FinishTransfer
      title: IbetSecurityTokenEscrowEventType
      description: An enumeration.
    IbetSecurityTokenInterfaceEventType:
      type: string
      enum:
        - Allot
        - ApplyForOffering
        - ApplyForTransfer
        - ApproveTransfer
        - CancelTransfer
        - ChangeOfferingStatus
        - ChangeStatus
        - ChangeTransferApprovalRequired
        - Issue
        - Lock
        - Redeem
        - Transfer
        - Unlock
      title: IbetSecurityTokenInterfaceEventType
      description: An enumeration.
    InvalidParameterErrorMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 88
        message:
          type: string
          title: Message
          examples:
            - Invalid Parameter
      type: object
      required:
        - code
        - message
      title: InvalidParameterErrorMetainfo
    InvalidParameterErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/InvalidParameterErrorMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: InvalidParameterErrorResponse
    JsonRPCRequest:
      properties:
        method:
          type: string
          title: Method
          description: 'method: eth_xxx'
        params:
          items: {}
          type: array
          title: Params
          description: parameters
      type: object
      required:
        - method
        - params
      title: JsonRPCRequest
    ListAllLockSortItem:
      type: string
      enum:
        - token_address
        - lock_address
        - account_address
        - value
      title: ListAllLockSortItem
      description: An enumeration.
    ListAllLockedSortItem:
      type: string
      enum:
        - token_address
        - lock_address
        - account_address
        - value
      title: ListAllLockedSortItem
      description: An enumeration.
    LockEventCategory:
      type: string
      enum:
        - Lock
        - Unlock
      title: LockEventCategory
      description: An enumeration.
    LockEventSortItem:
      type: string
      enum:
        - token_address
        - lock_address
        - recipient_address
        - value
        - block_timestamp
      title: LockEventSortItem
      description: An enumeration.
    MembershipTokensSortItem:
      type: string
      enum:
        - token_address
        - owner_address
        - name
        - symbol
        - company_name
        - tradable_exchange
        - status
        - personal_info_address
        - transferable
        - initial_offering_status
        - created
      title: MembershipTokensSortItem
      description: An enumeration.
    NotSupportedErrorMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 10
        message:
          type: string
          title: Message
          examples:
            - Not Supported
      type: object
      required:
        - code
        - message
      title: NotSupportedErrorMetainfo
    NotSupportedErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/NotSupportedErrorMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: NotSupportedErrorResponse
    NotificationReadRequest:
      properties:
        address:
          type: string
          title: Address
        is_read:
          type: boolean
          title: Is Read
      type: object
      required:
        - address
        - is_read
      title: NotificationReadRequest
    NotificationType:
      type: string
      enum:
        - NewOrder
        - NewOrderCounterpart
        - CancelOrder
        - CancelOrderCounterpart
        - ForceCancelOrder
        - BuyAgreement
        - BuySettlementOK
        - BuySettlementNG
        - SellAgreement
        - SellSettlementOK
        - SellSettlementNG
        - Transfer
        - ApplyForTransfer
        - ApproveTransfer
        - CancelTransfer
      title: NotificationType
      description: An enumeration.
    NotificationsSortItem:
      type: string
      enum:
        - notification_type
        - priority
        - block_timestamp
        - created
      title: NotificationsSortItem
      description: An enumeration.
    OrderType:
      type: string
      enum:
        - buy
        - sell
      title: OrderType
      description: An enumeration.
    RegisterAdminTokenRequest:
      properties:
        contract_address:
          type: string
          title: Contract Address
          description: Token Address
        is_public:
          type: boolean
          title: Is Public
          description: Public and private listings
        max_holding_quantity:
          type: integer
          minimum: 0
          title: Max Holding Quantity
          description: Maximum holding quantity limit
        max_sell_amount:
          type: integer
          minimum: 0
          title: Max Sell Amount
          description: Maximum sell amount limit
      type: object
      required:
        - contract_address
        - is_public
      title: RegisterAdminTokenRequest
    RequestBlockRangeLimitExceededErrorMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 31
        message:
          type: string
          title: Message
          examples:
            - Request Block Range Limit Exceeded
      type: object
      required:
        - code
        - message
      title: RequestBlockRangeLimitExceededErrorMetainfo
    RequestBlockRangeLimitExceededErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/RequestBlockRangeLimitExceededErrorMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: RequestBlockRangeLimitExceededErrorResponse
    RequestValidationErrorDict:
      properties:
        loc:
          items:
            type: string
          type: array
          title: Loc
        msg:
          type: string
          title: Msg
        type:
          type: string
          title: Type
      type: object
      required:
        - loc
        - msg
        - type
      title: RequestValidationErrorDict
    RequestValidationErrorInfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 88
        message:
          type: string
          title: Message
          examples:
            - Invalid Parameter
        description:
          items:
            $ref: '#/components/schemas/RequestValidationErrorDict'
          type: array
          title: Description
      type: object
      required:
        - code
        - message
        - description
      title: RequestValidationErrorInfo
    RequestValidationErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/RequestValidationErrorInfo'
        details:
          type: object
          title: Details
      type: object
      required:
        - meta
      title: RequestValidationErrorResponse
    ResponseLimitExceededErrorMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 30
        message:
          type: string
          title: Message
          examples:
            - Response Limit Exceeded
      type: object
      required:
        - code
        - message
      title: ResponseLimitExceededErrorMetainfo
    ResponseLimitExceededErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/ResponseLimitExceededErrorMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: ResponseLimitExceededErrorResponse
    SendChatWebhookRequest:
      properties:
        message:
          type: string
          format: json-string
          title: Message
          description: Message body
      type: object
      required:
        - message
      title: SendChatWebhookRequest
    SendMailRequest:
      properties:
        to_emails:
          items:
            type: string
            format: email
          type: array
          maxItems: 100
          minItems: 1
          title: To Emails
        subject:
          type: string
          maxLength: 100
          title: Subject
          description: Mail subject
        text_content:
          type: string
          title: Text Content
          description: Plain text mail content
          default: ''
        html_content:
          type: string
          title: Html Content
          description: HTML mail content
          default: ''
        file_name:
          type: string
          maxLength: 255
          minLength: 1
          title: File Name
          description: File name
        file_content:
          type: string
          minLength: 1
          format: binary
          title: File Content
          description: File content(Base64 encoded)
      type: object
      required:
        - to_emails
        - subject
      title: SendMailRequest
    SendRawTransactionRequest:
      properties:
        raw_tx_hex_list:
          items:
            type: string
          type: array
          minItems: 1
          title: Raw Tx Hex List
          description: Signed transaction list
      type: object
      required:
        - raw_tx_hex_list
      title: SendRawTransactionRequest
    ServiceUnavailableMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 503
        message:
          type: string
          title: Message
          examples:
            - Service Unavailable
      type: object
      required:
        - code
        - message
      title: ServiceUnavailableMetainfo
    ServiceUnavailableResponse:
      properties:
        meta:
          $ref: '#/components/schemas/ServiceUnavailableMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: ServiceUnavailableResponse
    ShareTokensSortItem:
      type: string
      enum:
        - token_address
        - owner_address
        - name
        - symbol
        - company_name
        - tradable_exchange
        - status
        - personal_info_address
        - transferable
        - is_offering
        - transfer_approval_required
        - is_canceled
        - created
      title: ShareTokensSortItem
      description: An enumeration.
    SortOrder:
      type: integer
      enum:
        - 0
        - 1
      title: SortOrder
      description: An enumeration.
    StraightBondTokensSortItem:
      type: string
      enum:
        - token_address
        - owner_address
        - name
        - symbol
        - company_name
        - tradable_exchange
        - status
        - personal_info_address
        - transferable
        - is_offering
        - transfer_approval_required
        - is_redeemed
        - created
      title: StraightBondTokensSortItem
      description: An enumeration.
    Success200MetaModel:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 200
        message:
          type: string
          title: Message
          examples:
            - OK
      type: object
      required:
        - code
        - message
      title: Success200MetaModel
    SuccessResponse:
      properties:
        meta:
          allOf:
            - $ref: '#/components/schemas/Success200MetaModel'
          title: Meta
          examples:
            - code: 200
              message: OK
        data:
          type: object
          title: Data
          default: {}
      type: object
      required:
        - meta
      title: SuccessResponse
    SuspendedTokenErrorMetainfo:
      properties:
        code:
          type: integer
          title: Code
          examples:
            - 20
        message:
          type: string
          title: Message
          examples:
            - Suspended Token
      type: object
      required:
        - code
        - message
      title: SuspendedTokenErrorMetainfo
    SuspendedTokenErrorResponse:
      properties:
        meta:
          $ref: '#/components/schemas/SuspendedTokenErrorMetainfo'
        details:
          type: object
          title: Details
          examples:
            - null
      type: object
      required:
        - meta
      title: SuspendedTokenErrorResponse
    TokenType:
      type: string
      enum:
        - IbetStraightBond
        - IbetShare
        - IbetMembership
        - IbetCoupon
      title: TokenType
      description: An enumeration.
    TransferSourceEvent:
      type: string
      enum:
        - Transfer
        - Unlock
      title: TransferSourceEvent
      description: An enumeration.
    UpdateAdminTokenRequest:
      properties:
        is_public:
          type: boolean
          title: Is Public
        max_holding_quantity:
          type: integer
          minimum: 0
          title: Max Holding Quantity
        max_sell_amount:
          type: integer
          minimum: 0
          title: Max Sell Amount
        owner_address:
          type: string
          title: Owner Address
      type: object
      title: UpdateAdminTokenRequest
    UpdateNotificationRequest:
      properties:
        is_read:
          type: boolean
          title: Is Read
          description: Read update
        is_flagged:
          type: boolean
          title: Is Flagged
          description: Set flag
        is_deleted:
          type: boolean
          title: Is Deleted
          description: Logical deletion
      type: object
      title: UpdateNotificationRequest
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
tags:
  - name: root
    description: ''
  - name: admin
    description: System administration
  - name: node_info
    description: Information about blockchain and contracts
  - name: abi
    description: Contract ABIs
  - name: eth_rpc
    description: Ethereum RPC
  - name: company_info
    description: Company(token issuer) information
  - name: token_info
    description: Detailed information for listed tokens
  - name: user_info
    description: User information
  - name: user_position
    description: User's token balance
  - name: user_notification
    description: Notifications for users
  - name: contract_log
    description: Contract event logs
  - name: dex
    description: Trade related functions on IbetExchange (Only for utility tokens)
  - name: messaging
    description: Messaging functions with external systems
