"""054_v23.3

Revision ID: 1055cb068506
Revises: 446f913d1f41
Create Date: 2023-03-30 17:46:25.165476

"""
from alembic import op
import sqlalchemy as sa


from app.database import get_db_schema
from migrations import skip_based_on_legacy_engine_version
from migrations.log import LOG

# revision identifiers, used by Alembic.
revision = "1055cb068506"
down_revision = "446f913d1f41"
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()
    if skip_based_on_legacy_engine_version(op, __name__):
        LOG.info("skipped")
        return

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "chat_webhook",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("message", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_table(
        "lock",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("transaction_hash", sa.String(length=66), nullable=False),
        sa.Column("block_number", sa.BigInteger(), nullable=False),
        sa.Column("token_address", sa.String(length=42), nullable=False),
        sa.Column("lock_address", sa.String(length=42), nullable=False),
        sa.Column("account_address", sa.String(length=42), nullable=False),
        sa.Column("value", sa.BigInteger(), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column("block_timestamp", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_lock_account_address"),
        "lock",
        ["account_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_lock_lock_address"),
        "lock",
        ["lock_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_lock_token_address"),
        "lock",
        ["token_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_lock_transaction_hash"),
        "lock",
        ["transaction_hash"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "locked_position",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=False),
        sa.Column("lock_address", sa.String(length=42), nullable=False),
        sa.Column("account_address", sa.String(length=42), nullable=False),
        sa.Column("value", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("token_address", "lock_address", "account_address"),
        schema=get_db_schema(),
    )
    op.create_table(
        "mail",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("to_email", sa.String(length=256), nullable=False),
        sa.Column("subject", sa.String(length=100), nullable=False),
        sa.Column("text_content", sa.Text(), nullable=False),
        sa.Column("html_content", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_table(
        "unlock",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("transaction_hash", sa.String(length=66), nullable=False),
        sa.Column("block_number", sa.BigInteger(), nullable=False),
        sa.Column("token_address", sa.String(length=42), nullable=False),
        sa.Column("lock_address", sa.String(length=42), nullable=False),
        sa.Column("account_address", sa.String(length=42), nullable=False),
        sa.Column("recipient_address", sa.String(length=42), nullable=False),
        sa.Column("value", sa.BigInteger(), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column("block_timestamp", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_unlock_account_address"),
        "unlock",
        ["account_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_unlock_lock_address"),
        "unlock",
        ["lock_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_unlock_recipient_address"),
        "unlock",
        ["recipient_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_unlock_token_address"),
        "unlock",
        ["token_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_unlock_transaction_hash"),
        "unlock",
        ["transaction_hash"],
        unique=False,
        schema=get_db_schema(),
    )
    op.add_column(
        "token_holder",
        sa.Column("locked_balance", sa.BigInteger(), nullable=True),
        schema=get_db_schema(),
    )
    op.add_column(
        "transfer",
        sa.Column("source_event", sa.String(length=50), nullable=False),
        schema=get_db_schema(),
    )
    op.add_column(
        "transfer",
        sa.Column("data", sa.JSON(), nullable=True),
        schema=get_db_schema(),
    )
    # NOTE: Update sqlalchemy-migrate version
    tables = sa.inspect(connection).get_table_names()
    if "migrate_version" in tables:
        op.get_bind().execute(f"UPDATE migrate_version SET version = 54;")
    # ### end Alembic commands ###


def downgrade():
    connection = op.get_bind()
    if skip_based_on_legacy_engine_version(op, __name__, is_downgrade=True):
        LOG.info("skipped")
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("transfer", "data", schema=get_db_schema())
    op.drop_column("transfer", "source_event", schema=get_db_schema())
    op.drop_column("token_holder", "locked_balance", schema=get_db_schema())
    op.drop_index(
        op.f("ix_unlock_transaction_hash"),
        table_name="unlock",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_unlock_token_address"),
        table_name="unlock",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_unlock_recipient_address"),
        table_name="unlock",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_unlock_lock_address"),
        table_name="unlock",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_unlock_account_address"),
        table_name="unlock",
        schema=get_db_schema(),
    )
    op.drop_table("unlock", schema=get_db_schema())
    op.drop_table("mail", schema=get_db_schema())
    op.drop_table("locked_position", schema=get_db_schema())
    op.drop_index(
        op.f("ix_lock_transaction_hash"),
        table_name="lock",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_lock_token_address"),
        table_name="lock",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_lock_lock_address"), table_name="lock", schema=get_db_schema()
    )
    op.drop_index(
        op.f("ix_lock_account_address"),
        table_name="lock",
        schema=get_db_schema(),
    )
    op.drop_table("lock", schema=get_db_schema())
    op.drop_table("chat_webhook", schema=get_db_schema())
    # NOTE: Update sqlalchemy-migrate version
    tables = sa.inspect(connection).get_table_names()
    if "migrate_version" in tables:
        op.get_bind().execute(f"UPDATE migrate_version SET version = 47;")
    # ### end Alembic commands ###
