"""041_v22.9

Revision ID: 55dee53de2ca
Revises: e8d970fdd886
Create Date: 2023-03-30 17:41:22.885110

"""
from alembic import op
import sqlalchemy as sa


from app.database import get_db_schema
from migrations import skip_based_on_legacy_engine_version
from migrations.log import LOG

# revision identifiers, used by Alembic.
revision = "55dee53de2ca"
down_revision = "e8d970fdd886"
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()
    if skip_based_on_legacy_engine_version(op, __name__):
        LOG.info("skipped")
        return

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bond_token",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=False),
        sa.Column("token_template", sa.String(length=40), nullable=True),
        sa.Column("owner_address", sa.String(length=42), nullable=True),
        sa.Column("company_name", sa.Text(), nullable=True),
        sa.Column("rsa_publickey", sa.String(length=2000), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=True),
        sa.Column("symbol", sa.String(length=200), nullable=True),
        sa.Column("total_supply", sa.BigInteger(), nullable=True),
        sa.Column("tradable_exchange", sa.String(length=42), nullable=True),
        sa.Column("contact_information", sa.String(length=2000), nullable=True),
        sa.Column("privacy_policy", sa.String(length=5000), nullable=True),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.Column("max_holding_quantity", sa.BigInteger(), nullable=True),
        sa.Column("max_sell_amount", sa.BigInteger(), nullable=True),
        sa.Column("short_term_cache_created", sa.DateTime(), nullable=True),
        sa.Column("personal_info_address", sa.String(length=42), nullable=True),
        sa.Column("transferable", sa.Boolean(), nullable=True),
        sa.Column("is_offering", sa.Boolean(), nullable=True),
        sa.Column("transfer_approval_required", sa.Boolean(), nullable=True),
        sa.Column("face_value", sa.BigInteger(), nullable=True),
        sa.Column("interest_rate", sa.Float(), nullable=True),
        sa.Column("interest_payment_date", sa.JSON(), nullable=True),
        sa.Column("redemption_date", sa.String(length=8), nullable=True),
        sa.Column("redemption_value", sa.BigInteger(), nullable=True),
        sa.Column("return_date", sa.String(length=8), nullable=True),
        sa.Column("return_amount", sa.String(length=2000), nullable=True),
        sa.Column("purpose", sa.String(length=2000), nullable=True),
        sa.Column("memo", sa.String(length=2000), nullable=True),
        sa.Column("is_redeemed", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("token_address"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_bond_token_owner_address"),
        "bond_token",
        ["owner_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_bond_token_personal_info_address"),
        "bond_token",
        ["personal_info_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_bond_token_tradable_exchange"),
        "bond_token",
        ["tradable_exchange"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "coupon_token",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=False),
        sa.Column("token_template", sa.String(length=40), nullable=True),
        sa.Column("owner_address", sa.String(length=42), nullable=True),
        sa.Column("company_name", sa.Text(), nullable=True),
        sa.Column("rsa_publickey", sa.String(length=2000), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=True),
        sa.Column("symbol", sa.String(length=200), nullable=True),
        sa.Column("total_supply", sa.BigInteger(), nullable=True),
        sa.Column("tradable_exchange", sa.String(length=42), nullable=True),
        sa.Column("contact_information", sa.String(length=2000), nullable=True),
        sa.Column("privacy_policy", sa.String(length=5000), nullable=True),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.Column("max_holding_quantity", sa.BigInteger(), nullable=True),
        sa.Column("max_sell_amount", sa.BigInteger(), nullable=True),
        sa.Column("short_term_cache_created", sa.DateTime(), nullable=True),
        sa.Column("details", sa.String(length=2000), nullable=True),
        sa.Column("return_details", sa.String(length=2000), nullable=True),
        sa.Column("expiration_date", sa.String(length=8), nullable=True),
        sa.Column("memo", sa.String(length=2000), nullable=True),
        sa.Column("transferable", sa.Boolean(), nullable=True),
        sa.Column("initial_offering_status", sa.Boolean(), nullable=True),
        sa.Column("image_url", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("token_address"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_coupon_token_owner_address"),
        "coupon_token",
        ["owner_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_coupon_token_tradable_exchange"),
        "coupon_token",
        ["tradable_exchange"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "idx_token_list_block_number",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("contract_address", sa.String(length=42), nullable=False),
        sa.Column("latest_block_number", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("contract_address"),
        schema=get_db_schema(),
    )
    op.create_table(
        "idx_transfer_block_number",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("contract_address", sa.String(length=42), nullable=False),
        sa.Column("latest_block_number", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("contract_address"),
        schema=get_db_schema(),
    )
    op.create_table(
        "membership_token",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=False),
        sa.Column("token_template", sa.String(length=40), nullable=True),
        sa.Column("owner_address", sa.String(length=42), nullable=True),
        sa.Column("company_name", sa.Text(), nullable=True),
        sa.Column("rsa_publickey", sa.String(length=2000), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=True),
        sa.Column("symbol", sa.String(length=200), nullable=True),
        sa.Column("total_supply", sa.BigInteger(), nullable=True),
        sa.Column("tradable_exchange", sa.String(length=42), nullable=True),
        sa.Column("contact_information", sa.String(length=2000), nullable=True),
        sa.Column("privacy_policy", sa.String(length=5000), nullable=True),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.Column("max_holding_quantity", sa.BigInteger(), nullable=True),
        sa.Column("max_sell_amount", sa.BigInteger(), nullable=True),
        sa.Column("short_term_cache_created", sa.DateTime(), nullable=True),
        sa.Column("details", sa.String(length=2000), nullable=True),
        sa.Column("return_details", sa.String(length=2000), nullable=True),
        sa.Column("expiration_date", sa.String(length=8), nullable=True),
        sa.Column("memo", sa.String(length=2000), nullable=True),
        sa.Column("transferable", sa.Boolean(), nullable=True),
        sa.Column("initial_offering_status", sa.Boolean(), nullable=True),
        sa.Column("image_url", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("token_address"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_membership_token_owner_address"),
        "membership_token",
        ["owner_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_membership_token_tradable_exchange"),
        "membership_token",
        ["tradable_exchange"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "share_token",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=False),
        sa.Column("token_template", sa.String(length=40), nullable=True),
        sa.Column("owner_address", sa.String(length=42), nullable=True),
        sa.Column("company_name", sa.Text(), nullable=True),
        sa.Column("rsa_publickey", sa.String(length=2000), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=True),
        sa.Column("symbol", sa.String(length=200), nullable=True),
        sa.Column("total_supply", sa.BigInteger(), nullable=True),
        sa.Column("tradable_exchange", sa.String(length=42), nullable=True),
        sa.Column("contact_information", sa.String(length=2000), nullable=True),
        sa.Column("privacy_policy", sa.String(length=5000), nullable=True),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.Column("max_holding_quantity", sa.BigInteger(), nullable=True),
        sa.Column("max_sell_amount", sa.BigInteger(), nullable=True),
        sa.Column("short_term_cache_created", sa.DateTime(), nullable=True),
        sa.Column("personal_info_address", sa.String(length=42), nullable=True),
        sa.Column("transferable", sa.Boolean(), nullable=True),
        sa.Column("is_offering", sa.Boolean(), nullable=True),
        sa.Column("transfer_approval_required", sa.Boolean(), nullable=True),
        sa.Column("issue_price", sa.BigInteger(), nullable=True),
        sa.Column("cancellation_date", sa.String(length=8), nullable=True),
        sa.Column("memo", sa.String(length=2000), nullable=True),
        sa.Column("principal_value", sa.BigInteger(), nullable=True),
        sa.Column("is_canceled", sa.Boolean(), nullable=True),
        sa.Column("dividend_information", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("token_address"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_share_token_owner_address"),
        "share_token",
        ["owner_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_share_token_personal_info_address"),
        "share_token",
        ["personal_info_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_share_token_tradable_exchange"),
        "share_token",
        ["tradable_exchange"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "token_list",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=False),
        sa.Column("token_template", sa.String(length=40), nullable=True),
        sa.Column("owner_address", sa.String(length=42), nullable=True),
        sa.PrimaryKeyConstraint("token_address"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_token_list_owner_address"),
        "token_list",
        ["owner_address"],
        unique=False,
        schema=get_db_schema(),
    )
    # NOTE: Update sqlalchemy-migrate version
    tables = sa.inspect(connection).get_table_names()
    if "migrate_version" in tables:
        op.get_bind().execute(f"UPDATE migrate_version SET version = 41;")
    # ### end Alembic commands ###


def downgrade():
    connection = op.get_bind()
    if skip_based_on_legacy_engine_version(op, __name__, is_downgrade=True):
        LOG.info("skipped")
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_token_list_owner_address"),
        table_name="token_list",
        schema=get_db_schema(),
    )
    op.drop_table("token_list", schema=get_db_schema())
    op.drop_index(
        op.f("ix_share_token_tradable_exchange"),
        table_name="share_token",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_share_token_personal_info_address"),
        table_name="share_token",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_share_token_owner_address"),
        table_name="share_token",
        schema=get_db_schema(),
    )
    op.drop_table("share_token", schema=get_db_schema())
    op.drop_index(
        op.f("ix_membership_token_tradable_exchange"),
        table_name="membership_token",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_membership_token_owner_address"),
        table_name="membership_token",
        schema=get_db_schema(),
    )
    op.drop_table("membership_token", schema=get_db_schema())
    op.drop_table("idx_transfer_block_number", schema=get_db_schema())
    op.drop_table("idx_token_list_block_number", schema=get_db_schema())
    op.drop_index(
        op.f("ix_coupon_token_tradable_exchange"),
        table_name="coupon_token",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_coupon_token_owner_address"),
        table_name="coupon_token",
        schema=get_db_schema(),
    )
    op.drop_table("coupon_token", schema=get_db_schema())
    op.drop_index(
        op.f("ix_bond_token_tradable_exchange"),
        table_name="bond_token",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_bond_token_personal_info_address"),
        table_name="bond_token",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_bond_token_owner_address"),
        table_name="bond_token",
        schema=get_db_schema(),
    )
    op.drop_table("bond_token", schema=get_db_schema())
    # NOTE: Update sqlalchemy-migrate version
    tables = sa.inspect(connection).get_table_names()
    if "migrate_version" in tables:
        op.get_bind().execute(f"UPDATE migrate_version SET version = 34;")
    # ### end Alembic commands ###
