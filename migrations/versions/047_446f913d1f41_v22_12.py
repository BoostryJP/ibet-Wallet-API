"""047_v22.12

Revision ID: 446f913d1f41
Revises: 55dee53de2ca
Create Date: 2023-03-30 17:44:25.105667

"""
from alembic import op
import sqlalchemy as sa


from app.database import get_db_schema
from migrations import skip_based_on_legacy_engine_version
from migrations.log import LOG

# revision identifiers, used by Alembic.
revision = "446f913d1f41"
down_revision = "55dee53de2ca"
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()
    if skip_based_on_legacy_engine_version(op, __name__):
        LOG.info("skipped")
        return

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "block_data",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("number", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("parent_hash", sa.String(length=66), nullable=False),
        sa.Column("sha3_uncles", sa.String(length=66), nullable=True),
        sa.Column("miner", sa.String(length=42), nullable=True),
        sa.Column("state_root", sa.String(length=66), nullable=True),
        sa.Column("transactions_root", sa.String(length=66), nullable=True),
        sa.Column("receipts_root", sa.String(length=66), nullable=True),
        sa.Column("logs_bloom", sa.String(length=514), nullable=True),
        sa.Column("difficulty", sa.BigInteger(), nullable=True),
        sa.Column("gas_limit", sa.Integer(), nullable=True),
        sa.Column("gas_used", sa.Integer(), nullable=True),
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("proof_of_authority_data", sa.Text(), nullable=True),
        sa.Column("mix_hash", sa.String(length=66), nullable=True),
        sa.Column("nonce", sa.String(length=18), nullable=True),
        sa.Column("hash", sa.String(length=66), nullable=False),
        sa.Column("size", sa.Integer(), nullable=True),
        sa.Column("transactions", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("number"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_block_data_hash"),
        "block_data",
        ["hash"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_block_data_timestamp"),
        "block_data",
        ["timestamp"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "idx_block_data_block_number",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("chain_id", sa.String(length=10), nullable=False),
        sa.Column("latest_block_number", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("chain_id"),
        schema=get_db_schema(),
    )
    op.create_table(
        "notification_block_number",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("notification_type", sa.String(length=256), nullable=False),
        sa.Column("contract_address", sa.String(length=42), nullable=False),
        sa.Column("latest_block_number", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("notification_type", "contract_address"),
        schema=get_db_schema(),
    )
    op.create_table(
        "tx_data",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("hash", sa.String(length=66), nullable=False),
        sa.Column("block_hash", sa.String(length=66), nullable=True),
        sa.Column("block_number", sa.BigInteger(), nullable=True),
        sa.Column("transaction_index", sa.Integer(), nullable=True),
        sa.Column("from_address", sa.String(length=42), nullable=True),
        sa.Column("to_address", sa.String(length=42), nullable=True),
        sa.Column("input", sa.Text(), nullable=True),
        sa.Column("gas", sa.Integer(), nullable=True),
        sa.Column("gas_price", sa.BigInteger(), nullable=True),
        sa.Column("value", sa.BigInteger(), nullable=True),
        sa.Column("nonce", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("hash"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_tx_data_block_number"),
        "tx_data",
        ["block_number"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_tx_data_from_address"),
        "tx_data",
        ["from_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_tx_data_to_address"),
        "tx_data",
        ["to_address"],
        unique=False,
        schema=get_db_schema(),
    )
    if op.get_context().dialect.name != "mysql":
        op.alter_column(
            "bond_token",
            "memo",
            existing_type=sa.VARCHAR(length=2000),
            type_=sa.String(length=10000),
            existing_nullable=True,
            schema=get_db_schema(),
        )
        op.alter_column(
            "share_token",
            "memo",
            existing_type=sa.VARCHAR(length=2000),
            type_=sa.String(length=10000),
            existing_nullable=True,
            schema=get_db_schema(),
        )
    else:
        op.alter_column(
            "bond_token",
            "memo",
            existing_type=sa.VARCHAR(length=2000),
            type_=sa.Text(),
            existing_nullable=True,
            schema=get_db_schema(),
        )
        op.alter_column(
            "share_token",
            "memo",
            existing_type=sa.VARCHAR(length=2000),
            type_=sa.Text(),
            existing_nullable=True,
            schema=get_db_schema(),
        )
    # NOTE: Update sqlalchemy-migrate version
    tables = sa.inspect(connection).get_table_names()
    if "migrate_version" in tables:
        op.get_bind().execute(sa.text(f"UPDATE migrate_version SET version = 47;"))
    # ### end Alembic commands ###


def downgrade():
    connection = op.get_bind()
    if skip_based_on_legacy_engine_version(op, __name__, is_downgrade=True):
        LOG.info("skipped")
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_tx_data_to_address"),
        table_name="tx_data",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_tx_data_from_address"),
        table_name="tx_data",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_tx_data_block_number"),
        table_name="tx_data",
        schema=get_db_schema(),
    )
    op.drop_table("tx_data", schema=get_db_schema())
    op.drop_table("notification_block_number", schema=get_db_schema())
    op.drop_table("idx_block_data_block_number", schema=get_db_schema())
    op.drop_index(
        op.f("ix_block_data_timestamp"),
        table_name="block_data",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_block_data_hash"),
        table_name="block_data",
        schema=get_db_schema(),
    )
    op.drop_table("block_data", schema=get_db_schema())
    if op.get_context().dialect.name != "mysql":
        op.alter_column(
            "bond_token",
            "memo",
            existing_type=sa.VARCHAR(length=10000),
            type_=sa.String(length=2000),
            existing_nullable=True,
            schema=get_db_schema(),
        )
        op.alter_column(
            "share_token",
            "memo",
            existing_type=sa.VARCHAR(length=10000),
            type_=sa.String(length=2000),
            existing_nullable=True,
            schema=get_db_schema(),
        )
    else:
        op.alter_column(
            "bond_token",
            "memo",
            existing_type=sa.Text(),
            type_=sa.VARCHAR(length=2000),
            existing_nullable=True,
            schema=get_db_schema(),
        )
        op.alter_column(
            "share_token",
            "memo",
            existing_type=sa.Text(),
            type_=sa.VARCHAR(length=2000),
            existing_nullable=True,
            schema=get_db_schema(),
        )
    # NOTE: Update sqlalchemy-migrate version
    tables = sa.inspect(connection).get_table_names()
    if "migrate_version" in tables:
        op.get_bind().execute(sa.text(f"UPDATE migrate_version SET version = 41;"))
    # ### end Alembic commands ###
