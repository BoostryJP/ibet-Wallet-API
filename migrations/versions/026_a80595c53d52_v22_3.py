"""026_v22.3

Revision ID: a80595c53d52
Revises: 
Create Date: 2023-03-30 17:02:32.252005

"""
from alembic import op
import sqlalchemy as sa


from app.database import get_db_schema
from migrations import skip_based_on_legacy_engine_version
from migrations.log import LOG

# revision identifiers, used by Alembic.
revision = "a80595c53d52"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()
    if skip_based_on_legacy_engine_version(op, __name__):
        LOG.info("skipped")
        return

    # ### commands auto generated by Alembic - please adjust! ###
    if op.get_context().dialect.name != "mysql":
        op.get_bind().execute(sa.text("CREATE SEQUENCE notification_id_seq START 1"))

    op.create_table(
        "agreement",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("transaction_hash", sa.String(length=66), nullable=True),
        sa.Column("exchange_address", sa.String(length=42), nullable=False),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("agreement_id", sa.BigInteger(), nullable=False),
        sa.Column("unique_order_id", sa.String(length=256), nullable=True),
        sa.Column("buyer_address", sa.String(length=42), nullable=True),
        sa.Column("seller_address", sa.String(length=42), nullable=True),
        sa.Column("counterpart_address", sa.String(length=42), nullable=True),
        sa.Column("amount", sa.BigInteger(), nullable=True),
        sa.Column("status", sa.Integer(), nullable=True),
        sa.Column("agreement_timestamp", sa.DateTime(), nullable=True),
        sa.Column("settlement_timestamp", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id", "exchange_address", "order_id", "agreement_id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_agreement_buyer_address"),
        "agreement",
        ["buyer_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_agreement_seller_address"),
        "agreement",
        ["seller_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_agreement_unique_order_id"),
        "agreement",
        ["unique_order_id"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "company",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("address", sa.String(length=42), nullable=False),
        sa.Column("corporate_name", sa.Text(), nullable=True),
        sa.Column("rsa_publickey", sa.String(length=2000), nullable=True),
        sa.Column("homepage", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("address"),
        schema=get_db_schema(),
    )
    op.create_table(
        "consume_coupon",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("transaction_hash", sa.String(length=66), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=True),
        sa.Column("account_address", sa.String(length=42), nullable=True),
        sa.Column("amount", sa.BigInteger(), nullable=True),
        sa.Column("block_timestamp", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_consume_coupon_account_address"),
        "consume_coupon",
        ["account_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_consume_coupon_token_address"),
        "consume_coupon",
        ["token_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_consume_coupon_transaction_hash"),
        "consume_coupon",
        ["transaction_hash"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "executable_contract",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("contract_address", sa.String(length=256), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_executable_contract_contract_address"),
        "executable_contract",
        ["contract_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "listing",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("token_address", sa.String(length=256), nullable=True),
        sa.Column("is_public", sa.Boolean(), nullable=True),
        sa.Column("max_holding_quantity", sa.BigInteger(), nullable=True),
        sa.Column("max_sell_amount", sa.BigInteger(), nullable=True),
        sa.Column("owner_address", sa.String(length=256), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_listing_token_address"),
        "listing",
        ["token_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "node",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("endpoint_uri", sa.String(length=267), nullable=True),
        sa.Column("priority", sa.Integer(), nullable=True),
        sa.Column("is_synced", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_table(
        "notification",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=True,
        ),
        sa.Column("notification_id", sa.String(length=256), nullable=False),
        sa.Column("notification_type", sa.String(length=256), nullable=True),
        sa.Column("priority", sa.Integer(), nullable=True),
        sa.Column("address", sa.String(length=256), nullable=True),
        sa.Column("is_read", sa.Boolean(), nullable=True),
        sa.Column("is_flagged", sa.Boolean(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("block_timestamp", sa.DateTime(), nullable=True),
        sa.Column("args", sa.JSON(), nullable=True),
        sa.Column("metainfo", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("notification_id"),
        schema=get_db_schema(),
    )
    if op.get_context().dialect.name != "mysql":
        op.alter_column(
            "notification",
            "id",
            server_default=sa.text("nextval('notification_id_seq'::regclass)"),
        )
    op.create_index(
        "notification_index_1",
        "notification",
        ["address", "notification_id"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        "notification_index_2",
        "notification",
        ["address", "priority", "notification_id"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "order",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("transaction_hash", sa.String(length=66), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=True),
        sa.Column("exchange_address", sa.String(length=42), nullable=True),
        sa.Column("order_id", sa.BigInteger(), nullable=True),
        sa.Column("unique_order_id", sa.String(length=256), nullable=True),
        sa.Column("account_address", sa.String(length=42), nullable=True),
        sa.Column("counterpart_address", sa.String(length=42), nullable=True),
        sa.Column("is_buy", sa.Boolean(), nullable=True),
        sa.Column("price", sa.BigInteger(), nullable=True),
        sa.Column("amount", sa.BigInteger(), nullable=True),
        sa.Column("agent_address", sa.String(length=42), nullable=True),
        sa.Column("is_cancelled", sa.Boolean(), nullable=True),
        sa.Column("order_timestamp", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_order_exchange_address"),
        "order",
        ["exchange_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_order_order_id"),
        "order",
        ["order_id"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_order_token_address"),
        "order",
        ["token_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_order_unique_order_id"),
        "order",
        ["unique_order_id"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "position",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("token_address", sa.String(length=42), nullable=True),
        sa.Column("account_address", sa.String(length=42), nullable=True),
        sa.Column("balance", sa.BigInteger(), nullable=True),
        sa.Column("exchange_balance", sa.BigInteger(), nullable=True),
        sa.Column("exchange_commitment", sa.BigInteger(), nullable=True),
        sa.Column("pending_transfer", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_position_token_address"),
        "position",
        ["token_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "transfer",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("transaction_hash", sa.String(length=66), nullable=True),
        sa.Column("token_address", sa.String(length=42), nullable=True),
        sa.Column("from_address", sa.String(length=42), nullable=True),
        sa.Column("to_address", sa.String(length=42), nullable=True),
        sa.Column("value", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_transfer_token_address"),
        "transfer",
        ["token_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_transfer_transaction_hash"),
        "transfer",
        ["transaction_hash"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_table(
        "transfer_approval",
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("modified", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("token_address", sa.String(length=42), nullable=True),
        sa.Column("exchange_address", sa.String(length=42), nullable=True),
        sa.Column("application_id", sa.BigInteger(), nullable=True),
        sa.Column("from_address", sa.String(length=42), nullable=True),
        sa.Column("to_address", sa.String(length=42), nullable=True),
        sa.Column("value", sa.BigInteger(), nullable=True),
        sa.Column("application_datetime", sa.DateTime(), nullable=True),
        sa.Column("application_blocktimestamp", sa.DateTime(), nullable=True),
        sa.Column("approval_datetime", sa.DateTime(), nullable=True),
        sa.Column("approval_blocktimestamp", sa.DateTime(), nullable=True),
        sa.Column("cancelled", sa.Boolean(), nullable=True),
        sa.Column("transfer_approved", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_transfer_approval_application_id"),
        "transfer_approval",
        ["application_id"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_transfer_approval_exchange_address"),
        "transfer_approval",
        ["exchange_address"],
        unique=False,
        schema=get_db_schema(),
    )
    op.create_index(
        op.f("ix_transfer_approval_token_address"),
        "transfer_approval",
        ["token_address"],
        unique=False,
        schema=get_db_schema(),
    )
    # NOTE: Update sqlalchemy-migrate version
    tables = sa.inspect(connection).get_table_names()
    if "migrate_version" in tables:
        op.get_bind().execute(sa.text(f"UPDATE migrate_version SET version = 26;"))
    # ### end Alembic commands ###


def downgrade():
    connection = op.get_bind()
    if skip_based_on_legacy_engine_version(op, __name__, is_downgrade=True):
        LOG.info("skipped")
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_transfer_approval_token_address"),
        table_name="transfer_approval",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_transfer_approval_exchange_address"),
        table_name="transfer_approval",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_transfer_approval_application_id"),
        table_name="transfer_approval",
        schema=get_db_schema(),
    )
    op.drop_table("transfer_approval", schema=get_db_schema())
    op.drop_index(
        op.f("ix_transfer_transaction_hash"),
        table_name="transfer",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_transfer_token_address"),
        table_name="transfer",
        schema=get_db_schema(),
    )
    op.drop_table("transfer", schema=get_db_schema())
    op.drop_index(
        op.f("ix_position_token_address"),
        table_name="position",
        schema=get_db_schema(),
    )
    op.drop_table("position", schema=get_db_schema())
    op.drop_index(
        op.f("ix_order_unique_order_id"),
        table_name="order",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_order_token_address"),
        table_name="order",
        schema=get_db_schema(),
    )
    op.drop_index(op.f("ix_order_order_id"), table_name="order", schema=get_db_schema())
    op.drop_index(
        op.f("ix_order_exchange_address"),
        table_name="order",
        schema=get_db_schema(),
    )
    op.drop_table("order", schema=get_db_schema())
    op.drop_index(
        "notification_index_2",
        table_name="notification",
        schema=get_db_schema(),
    )
    op.drop_index(
        "notification_index_1",
        table_name="notification",
        schema=get_db_schema(),
    )
    op.drop_table("notification", schema=get_db_schema())
    op.drop_table("node", schema=get_db_schema())
    op.drop_index(
        op.f("ix_listing_token_address"),
        table_name="listing",
        schema=get_db_schema(),
    )
    op.drop_table("listing", schema=get_db_schema())
    op.drop_index(
        op.f("ix_executable_contract_contract_address"),
        table_name="executable_contract",
        schema=get_db_schema(),
    )
    op.drop_table("executable_contract", schema=get_db_schema())
    op.drop_index(
        op.f("ix_consume_coupon_transaction_hash"),
        table_name="consume_coupon",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_consume_coupon_token_address"),
        table_name="consume_coupon",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_consume_coupon_account_address"),
        table_name="consume_coupon",
        schema=get_db_schema(),
    )
    op.drop_table("consume_coupon", schema=get_db_schema())
    op.drop_table("company", schema=get_db_schema())
    op.drop_index(
        op.f("ix_agreement_unique_order_id"),
        table_name="agreement",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_agreement_seller_address"),
        table_name="agreement",
        schema=get_db_schema(),
    )
    op.drop_index(
        op.f("ix_agreement_buyer_address"),
        table_name="agreement",
        schema=get_db_schema(),
    )
    op.drop_table("agreement", schema=get_db_schema())
    if op.get_context().dialect.name != "mysql":
        op.get_bind().execute(sa.text("DROP SEQUENCE notification_id_seq"))
    # NOTE: Update sqlalchemy-migrate version
    tables = sa.inspect(connection).get_table_names()
    if "migrate_version" in tables:
        op.get_bind().execute(sa.text(f"UPDATE migrate_version SET version = 0;"))
    # ### end Alembic commands ###
